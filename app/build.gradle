apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.lilong.plugindemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile rootProject.ext.v7SupportLib
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile files("${rootProject.ext.pluginInterfaceJarAbsPath}")
    provided rootProject.ext.gradleAndroidPlugin
}

task deleteMainInterfaceJar(type: Delete) {
    delete "${rootProject.ext.mainInterfaceJarAbsPath}"
}

// 将app工程中的build/intermediates/classes/debug目录下的com.lilong.plugindemo中的class文件
// 去掉BuildConfig.class和R.class后打成jar包
task createMainInterfaceJar(type: Jar) {
    archiveName "${rootProject.ext.mainInterfaceJarName}"
    destinationDir new File("${rootProject.ext.mainInterfaceJarDirAbsPath}")
    from "build/intermediates/classes/debug"
    exclude "**/BuildConfig.class", "**/R.class"
}

createMainInterfaceJar.dependsOn deleteMainInterfaceJar, assemble

task deleteMainSupportV7InterfaceJar(type: Delete) {
    delete "${rootProject.ext.mainSupportV7InterfaceDirAbsPath}"
}

// 因为插件不能直接依赖supportv7(定制的aapt会导致资源整合失败)
// 所以将app工程中引入的supportv7的所有jar包拷贝到插件项目里，让插件项目provided依赖
task createMainSupportV7InterfaceJar(type: Copy) {
    from "build/intermediates/exploded-aar/com.android.support"
    into "${rootProject.ext.mainSupportV7InterfaceDirAbsPath}"
    include "**/jars/classes.jar"
    exclude "**/aidl", "**/assets", "**/jni", "**/libs", "**/res"
}

createMainSupportV7InterfaceJar.dependsOn deleteMainSupportV7InterfaceJar, assemble
